ID AND TYPE  The built-in function id() returns the identity of an object as an integer. This integer usually corresponds to the object’s location in memory, although this is specific to the Python implementation and the platform being used. The is operator compares the identity of two objects.
The built-in function type() returns the type of an object. Lets look at a simple example.

''' Example 1 '''
>>> x = "Hello World"
>>> y = "Hello World"
>>> id(x)
140135852055856
>>> id(y)
140135852055856
>>> print(x is y) '''comparing the types'''
True

''' Example 2 '''
>>> a = 50
>>> type(a)
<class: ‘int’>
>>> b = "Hello World"
>>> type(b)

<class: 'string'>

MUTABLE AND IMMUTABLE OBJECTS :  a mutable object can change its state or contents and immutable objects cannot.



Mutable objects: list, dict, set, byte array



Immutable objects: int, float, complex, string, tuple, frozen set [note: immutable version of set], bytes.



A practical example to find out the mutability of object types

x = 10

x = y



We are creating an object of type int. identifiers x and y points to the same object.

id(x) == id(y)

id(y) == id(10)



if we do a simple operation.

x = x + 1

Now

id(x) != id(y)

id(x) != id(10)

The object in which x was tagged is changed. object 10 was never modified. Immutable objects doesn’t allow modification after creation



In the case of mutable objects

m = list([1, 2, 3])

n = m



We are creating an object of type list. identifiers m and m tagged to the same list object, which is a collection of 3 immutable int objects.

id(m) == id(n)



Now popping an item from list object does change the object,

m.pop()

object id will not be changed

id(m) == id(n)

m and n will be pointing to the same list object after the modification. The list object will now contain [1, 2].